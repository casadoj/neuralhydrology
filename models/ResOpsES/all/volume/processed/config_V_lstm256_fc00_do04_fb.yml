# --- Experiment configurations --------------------------------------------------------------------

# experiment name, used as folder name
experiment_name: V_lstm256_fc00_do04_fb

# place to store run directory (if empty runs are stored in code_dir/runs/)
run_dir:

# files to specify training, validation and test basins (relative to code root or absolute path)
train_basin_file: ./samples/sample_train.txt
validation_basin_file: ./samples/sample_validation.txt
test_basin_file: ./samples/sample_train.txt

# if you want to use different (continuous or split) periods per basin (and period) define path to pickle files here.
per_basin_train_periods_file: ./samples/periods_train.pkl
per_basin_validation_periods_file: ./samples/periods_validation.pkl
per_basin_test_periods_file: ./samples/periods_train.pkl

# fixed seed, leave empty to use a random seed
seed: 0

# which GPU (id) to use [in format of cuda:0, cuda:1 etc, or cpu or None]
device: cuda:0

# --- Validation configuration ---------------------------------------------------------------------

# specify after how many epochs to perform validation
validate_every: 1

# specify how many random basins to use for validation
validate_n_random_basins: 100

# By default, validation is cached (even is this argument is empty). Set to False, if you do not want to use it.
cache_validation_data: True

# specify which metrics to calculate during validation (see neuralhydrology.evaluation.metrics)
# this can either be a list or a dictionary. If a dictionary is used, the inner keys must match the name of the
# target_variable specified below. Using dicts allows for different metrics per target variable.
metrics:
- RMSE
- KGE
- Beta-KGE    # \frac{\mu_s}{\mu_o}
- Pearson-r
- NSE
- Alpha-NSE   # \frac{\sigma_s}{\sigma_o}
- Beta-NSE    # \frac{\mu_s - \mu_o}{\sigma_o}

# --- Model configuration --------------------------------------------------------------------------

# base model type [cudalstm, customlstm, ealstm, embcudalstm, mtslstm, gru, transformer]
# (has to match the if statement in modelzoo/__init__.py)
model: cudalstm

# path to weight file that should be used as initial weights. Leave empty to start from random weights
checkpoint_path:

# prediction head [regression]. Define the head specific parameters below
head: regression

# ----> Regression settings <----
output_activation: linear

# ----> Embedding network settings <----

# # define embedding network for static inputs
# statics_embedding:
#   type: fc
#   # define number of neurons per layer in the FC network used as embedding network
#   hiddens:
#     # - 16
#     # - 64
#   # activation function of embedding network
#   activation: tanh
#   # dropout applied to embedding network
#   dropout: 0.4

# # define embedding network for dynamic inputs
# dynamics_embedding:
#   type: fc
#   # define number of neurons per layer in the FC network used as embedding network
#   hiddens:
#     # - 16
#     # - 64
#   # activation function of embedding network
#   activation: tanh
#   # dropout applied to embedding network
#   dropout: 0.4

# ----> General settings <----

# Number of cell states of the LSTM
hidden_size: 256

# Initial bias value of the forget gate
initial_forget_bias: 1

# Dropout applied to the output of the LSTM
output_dropout: 0.4

# --- Training configuration -----------------------------------------------------------------------

# specify optimizer [Adam]
optimizer: Adam

# specify loss [MSE, NSE, RMSE]
loss: NSE

# add regularization terms.
# Options: tie_frequencies (couples the different frequencies' predictions in an MSE error term)
regularization:
#- tie_frequencies

# specify learning rates to use starting at specific epochs (0 is the initial learning rate)
learning_rate:
    0: 1e-3
    10: 5e-4
    20: 1e-4

# Mini-batch size
batch_size: 512 #128

# Number of training epochs
epochs: 15

# adds noise with given std to the labels during training. Leave empty or set to 0 if not used.
target_noise_std: 0 #0.005

# If a value, clips the gradients during training to that norm.
clip_gradient_norm: 1

# Defines which time steps are used to calculate the loss. Can't be larger than seq_length.
# If use_frequencies is used, this needs to be a dict mapping each frequency to a predict_last_n-value, else an int.
predict_last_n: 1

# Length of the input sequence
seq_length: 365

# Number of parallel workers used in the data pipeline
num_workers: 32

# Log the training loss every n steps
log_interval: 1

# If true, writes logging results into tensorboard file
log_tensorboard: True

# If a value and greater than 0, logs n random basins as figures during validation
log_n_figures: 0

# Save model weights every n epochs
save_weights_every: 1

# Store the results of the validation to disk
save_validation_results: True


# --- Data configurations --------------------------------------------------------------------------

# which data set to use [camels_us, camels_gb, global, hourly_camels_us, camels_cl, generic]
dataset: generic

# Path to data set root
data_dir: /eos/jeodpp/home/users/casadje/data/ResOpsES/

# Set to True, if train data file should be save to disk. If empty or False, train data is not saved.
save_train_data: True

# If existing train data file exist, specify path to the pickle file here
train_data_file: #./train_data/train_data.p

# variables to use as time series input (names match the data file column headers)
dynamic_inputs:
- inflow_efas5
- evapo_point_emo1
# - evapo_areal_emo1
- precip_point_emo1
# - precip_areal_emo1
- temp_areal_emo1
- year
- month
- weekofyear
- dayofyear
- dayofweek

# which columns to use as target
target_variables:
- volume

# clip negative predictions to zero for all variables listed below. Should be a list, even for single variables.
clip_targets_to_zero:
- volume

# Which attributes to use. Leave empty if none should be used
static_attributes:
- AREA_SKM
- CAP_MCM
- CATCH_SKM
- DAM_HGT_M
- DOD_M
- DOR
- ELEV_MASL
- LAT
- LON
- flood
- hydropower
- irrigation
- supply

# Path to pickle file(s) containing additional data. Each pickle file must contain a dictionary
# with one key for each basin and the value is a time indexed data frame, where each column is a 
# feature.
# Convention: If a column is used as static input, the value to use for specific sample should be in
# same row (datetime) as the target discharge value.
additional_feature_files: 

# columns of the data frame to use as (additional) "static" inputs for each sample. Must be present in
# the above linked additional feature files. These values will be used as static inputs, but they can evolve over time.
# Leave empty to not use any.
evolving_attributes:

# whether to use basin id one hot encoding as (additional) static input
use_basin_id_encoding: False